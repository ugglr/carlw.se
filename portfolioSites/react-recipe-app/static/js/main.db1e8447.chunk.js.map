{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getRecipe","style","marginBottom","className","type","name","Recipes","recipes","map","recipe","key","title","src","image_url","alt","length","concat","substring","publisher","Link","to","pathname","recipe_id","state","API_KEY","App","_callee","e","recipeName","api_call","data","regenerator_default","wrap","_context","prev","next","target","elements","value","preventDefault","fetch","sent","json","_this","setState","console","log","stop","this","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","components_Form","components_Recipes","Component","Recipe","activeRecipe","req","res","location","href","publisher_url","React","Router","BrowserRouter","Switch","Route","path","component","exact","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","components_Router","document","getElementById","URL","process","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.db1e8447.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = props => (\r\n  <form onSubmit={props.getRecipe} style={{ marginBottom: \"2rem\" }}>\r\n    <input className=\"form__input\" type=\"text\" name=\"recipeName\" />\r\n    <button className=\"form__button\">Search</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Recipes = props => (\r\n  <div className=\"container\">\r\n    <div className=\"row\">\r\n      {props.recipes &&\r\n        props.recipes.map(recipe => {\r\n          return (\r\n            <div\r\n              key={recipe.title}\r\n              className=\"col-md-4\"\r\n              style={{ marginBottom: \"2rem\" }}\r\n            >\r\n              <div className=\"recipes__box\">\r\n                <img\r\n                  className=\"recipe__box-img\"\r\n                  src={recipe.image_url}\r\n                  alt={recipe.title}\r\n                />\r\n                <div className=\"recipe__text\">\r\n                  <h5 className=\"recipes__title\">\r\n                    {recipe.title.length < 20\r\n                      ? `${recipe.title}`\r\n                      : `${recipe.title.substring(0, 25)}...`}\r\n                  </h5>\r\n                  <p className=\"recipes__subtitle\">\r\n                    Publisher: <span>{recipe.publisher}</span>\r\n                  </p>\r\n                </div>\r\n                <button className=\"recipe_buttons\">\r\n                  <Link\r\n                    to={{\r\n                      pathname: `/recipe/${recipe.recipe_id}`,\r\n                      state: { recipe: recipe.title }\r\n                    }}\r\n                  >\r\n                    View Recipe\r\n                  </Link>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Recipes;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Form from \"./components/Form\";\nimport Recipes from \"./components/Recipes\";\n\nconst API_KEY = \"7a4241b148f3d499670f6d2851c57c05\";\n\nclass App extends Component {\n  state = {\n    recipes: []\n  };\n  getRecipe = async e => {\n    const recipeName = e.target.elements.recipeName.value;\n    e.preventDefault();\n    const api_call = await fetch(\n      `https://cors-anywhere.herokuapp.com/https://www.food2fork.com/api/search?key=${API_KEY}&q=${recipeName}&count=10`\n    );\n\n    const data = await api_call.json();\n    this.setState({ recipes: data.recipes });\n    console.log(this.state.recipes);\n  };\n\n  componentDidMount = () => {\n    const json = localStorage.getItem(\"recipes\");\n    const recipes = JSON.parse(json);\n    this.setState({ recipes });\n  };\n\n  componentDidUpdate = () => {\n    const recipes = JSON.stringify(this.state.recipes);\n    localStorage.setItem(\"recipes\", recipes);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Recipe Search</h1>\n        </header>\n        <Form getRecipe={this.getRecipe} />\n        <Recipes recipes={this.state.recipes} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst API_KEY = \"7a4241b148f3d499670f6d2851c57c05\";\r\n\r\nclass Recipe extends React.Component {\r\n  state = {\r\n    activeRecipe: []\r\n  };\r\n  componentDidMount = async () => {\r\n    const title = this.props.location.state.recipe;\r\n    const req = await fetch(\r\n      `https://cors-anywhere.herokuapp.com/http://food2fork.com/api/search?key=${API_KEY}&q=${title}`\r\n    );\r\n\r\n    const res = await req.json();\r\n    this.setState({ activeRecipe: res.recipes[0] });\r\n    console.log(this.state.activeRecipe);\r\n  };\r\n  render() {\r\n    const recipe = this.state.activeRecipe;\r\n    return (\r\n      <div className=\"container\">\r\n        {this.state.activeRecipe.length !== 0 && (\r\n          <div className=\"active-recipe\">\r\n            <img\r\n              className=\"active-recipe__img\"\r\n              src={recipe.image_url}\r\n              alt={recipe.title}\r\n            />\r\n            <h3 className=\"active-recipe__title\">{recipe.title}</h3>\r\n            <h4 className=\"active-recipe__publisher\">\r\n              Publisher: <span>{recipe.publisher}</span>\r\n            </h4>\r\n            <p className=\"active-recipe__website\">\r\n              Website:\r\n              <span>\r\n                <a href={recipe.publisher_url}>{recipe.publisher_url}</a>\r\n              </span>\r\n            </p>\r\n            <button className=\"active-recipe__button\">\r\n              <Link to=\"/\">Go Home</Link>\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Recipe;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nimport App from \"../App\";\r\nimport Recipe from \"./Recipe\";\r\n\r\nconst Router = () => (\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route path=\"/\" component={App} exact />\r\n      <Route path=\"/recipe/:id\" component={Recipe} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default Router;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nimport Router from \"./components/Router\";\n\n//import App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}